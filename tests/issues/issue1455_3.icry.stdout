Loading module Cryptol
Loading module Cryptol
Loading interface module I
Loading module F
Loading module G
Loading module M
Loading module Inst3
4
8
0x3
0x05
x : [4]
y : [8]
0x4
0x06
0x0b
a : [4]
b : [8]
c : [m]
0x0d
Submodules
==========
    
  From Inst3
  ----------
       
    import of F at issue1455/G.cry:5:1--5:9
     
Type Synonyms
=============
    
  From Cryptol
  ------------
       
    type Bool = Bit
    type Char = [8]
    type lg2 n = width (max 1 n - 1)
    type String n = [n]Char
    type Word n = [n]
     
  From Inst3
  ----------
       
    type m = 8
    type n = 4
     
Constraint Synonyms
===================
    
  From Cryptol
  ------------
       
    type constraint i < j = j >= 1 + i
    type constraint i <= j = j >= i
    type constraint i > j = i >= 1 + j
     
Primitive Types
===============
    
  From Cryptol
  ------------
       
    (!=) : # -> # -> Prop
    (==) : # -> # -> Prop
    (>=) : # -> # -> Prop
    (+) : # -> # -> #
    (-) : # -> # -> #
    (%) : # -> # -> #
    (%^) : # -> # -> #
    (*) : # -> # -> #
    (/) : # -> # -> #
    (/^) : # -> # -> #
    (^^) : # -> # -> #
    Bit : *
    Cmp : * -> Prop
    Eq : * -> Prop
    FLiteral : # -> # -> # -> * -> Prop
    Field : * -> Prop
    Integer : *
    Integral : * -> Prop
    Literal : # -> * -> Prop
    LiteralLessThan : # -> * -> Prop
    Logic : * -> Prop
    lengthFromThenTo : # -> # -> # -> #
    max : # -> # -> #
    min : # -> # -> #
    prime : # -> Prop
    Rational : *
    Ring : * -> Prop
    Round : * -> Prop
    SignedCmp : * -> Prop
    width : # -> #
    Z : # -> *
    Zero : * -> Prop
     
Nominal Types
=============
    
  From Cryptol
  ------------
       
    enum Option a
    enum Result t e
     
Symbols
=======
    
  From <interactive>
  ------------------
       
    it : [8]
     
  From Cryptol
  ------------
       
    (/.) : {a} (Field a) => a -> a -> a
    (==>) : Bit -> Bit -> Bit
    (\/) : Bit -> Bit -> Bit
    (/\) : Bit -> Bit -> Bit
    (!=) : {a} (Eq a) => a -> a -> Bit
    (!==) : {a, b} (Eq b) => (a -> b) -> (a -> b) -> a -> Bit
    (==) : {a} (Eq a) => a -> a -> Bit
    (===) : {a, b} (Eq b) => (a -> b) -> (a -> b) -> a -> Bit
    (<) : {a} (Cmp a) => a -> a -> Bit
    (<$) : {a} (SignedCmp a) => a -> a -> Bit
    (<=) : {a} (Cmp a) => a -> a -> Bit
    (<=$) : {a} (SignedCmp a) => a -> a -> Bit
    (>) : {a} (Cmp a) => a -> a -> Bit
    (>$) : {a} (SignedCmp a) => a -> a -> Bit
    (>=) : {a} (Cmp a) => a -> a -> Bit
    (>=$) : {a} (SignedCmp a) => a -> a -> Bit
    (||) : {a} (Logic a) => a -> a -> a
    (^) : {a} (Logic a) => a -> a -> a
    (&&) : {a} (Logic a) => a -> a -> a
    (#) : {front, back, a} [front]a -> [back]a -> [front + back]a
    (<<) : {n, ix, a} (Integral ix, Zero a) => [n]a -> ix -> [n]a
    (<<<) : {n, ix, a} (Integral ix) => [n]a -> ix -> [n]a
    (>>) : {n, ix, a} (Integral ix, Zero a) => [n]a -> ix -> [n]a
    (>>$) : {n, ix} (n >= 1, Integral ix) => [n] -> ix -> [n]
    (>>>) : {n, ix, a} (Integral ix) => [n]a -> ix -> [n]a
    (+) : {a} (Ring a) => a -> a -> a
    (-) : {a} (Ring a) => a -> a -> a
    (%) : {a} (Integral a) => a -> a -> a
    (%$) : {n} (n >= 1) => [n] -> [n] -> [n]
    (*) : {a} (Ring a) => a -> a -> a
    (/) : {a} (Integral a) => a -> a -> a
    (/$) : {n} (n >= 1) => [n] -> [n] -> [n]
    (^^) : {a, e} (Ring a, Integral e) => a -> e -> a
    (!) : {n, a, ix} (Integral ix) => [n]a -> ix -> a
    (!!) : {n, k, ix, a} (Integral ix) => [n]a -> [k]ix -> [k]a
    (@) : {n, a, ix} (Integral ix) => [n]a -> ix -> a
    (@@) : {n, k, ix, a} (Integral ix) => [n]a -> [k]ix -> [k]a
    abs : {a} (Cmp a, Ring a) => a -> a
    all : {n, a} (a -> Bit) -> [n]a -> Bit
    and : {n} [n] -> Bit
    any : {n, a} (a -> Bit) -> [n]a -> Bit
    assert : {a, n} Bit -> String n -> a -> a
    carry : {n} [n] -> [n] -> Bit
    ceiling : {a} (Round a) => a -> Integer
    complement : {a} (Logic a) => a -> a
    curry : {a, b, c} ((a, b) -> c) -> a -> b -> c
    deepseq : {a, b} (Eq a) => a -> b -> b
    demote : {val, rep} (Literal val rep) => rep
    drop : {front, back, a} [front + back]a -> [back]a
    elem : {n, a} (Eq a) => a -> [n]a -> Bit
    error : {a, n} String n -> a
    False : Bit
    floor : {a} (Round a) => a -> Integer
    foldl : {n, a, b} (a -> b -> a) -> a -> [n]b -> a
    foldl' : {n, a, b} (Eq a) => (a -> b -> a) -> a -> [n]b -> a
    foldr : {n, a, b} (a -> b -> b) -> b -> [n]a -> b
    foldr' : {n, a, b} (Eq b) => (a -> b -> b) -> b -> [n]a -> b
    fraction : {m, n, r, a} (FLiteral m n r a) => a
    fromInteger : {a} (Ring a) => Integer -> a
    fromThenTo :
      {first, next, last, a, len}
        (Literal first a, Literal next a, Literal last a, first != next,
         lengthFromThenTo first next last == len) =>
        [len]a
    fromTo :
      {first, last, a} (last >= first, Literal last a) => [1 + (last - first)]a
    fromToBy :
      {first, last, stride, a}
        (stride >= 1, last >= first, Literal last a) =>
        [1 + (last - first) / stride]a
    fromToByLessThan :
      {first, bound, stride, a}
        (stride >= 1, bound >= first, LiteralLessThan bound a) =>
        [(bound - first) /^ stride]a
    fromToDownBy :
      {first, last, stride, a}
        (stride >= 1, first >= last, Literal first a) =>
        [1 + (first - last) / stride]a
    fromToDownByGreaterThan :
      {first, bound, stride, a}
        (stride >= 1, first >= bound, Literal first a) =>
        [(first - bound) /^ stride]a
    fromToLessThan :
      {first, bound, a}
        (bound >= first, LiteralLessThan bound a) =>
        [bound - first]a
    fromZ : {n} (n >= 1) => Z n -> Integer
    generate :
      {n, a, ix} (Integral ix, LiteralLessThan n ix) => (ix -> a) -> [n]a
    groupBy : {each, parts, a} [each * parts]a -> [parts][each]a
    head : {n, a} [1 + n]a -> a
    infFrom : {a, n} (Integral a) => a -> [n]a
    infFromThen : {a, n} (Integral a) => a -> a -> [n]a
    iterate : {a, n} (a -> a) -> a -> [1 + n]a
    join : {parts, each, a} [parts][each]a -> [parts * each]a
    last : {n, a} [1 + n]a -> a
    length : {n, a, b} (Literal n b) => [n]a -> b
    lg2 : {n} [n] -> [n]
    map : {n, a, b} (a -> b) -> [n]a -> [n]b
    max : {a} (Cmp a) => a -> a -> a
    min : {a} (Cmp a) => a -> a -> a
    negate : {a} (Ring a) => a -> a
    number : {val, rep} (Literal val rep) => rep
    or : {n} [n] -> Bit
    parmap : {a, b, n} (Eq b) => (a -> b) -> [n]a -> [n]b
    pdiv : {u, v} [u] -> [v] -> [u]
    pmod : {u, v} [u] -> [1 + v] -> [v]
    pmult : {u, v} [1 + u] -> [1 + v] -> [1 + (u + v)]
    product : {n, a} (Eq a, Ring a) => [n]a -> a
    random : {a} [256] -> a
    ratio : Integer -> Integer -> Rational
    recip : {a} (Field a) => a -> a
    repeat : {n, a} a -> [n]a
    reverse : {n, a} [n]a -> [n]a
    rnf : {a} (Eq a) => a -> a
    roundAway : {a} (Round a) => a -> Integer
    roundToEven : {a} (Round a) => a -> Integer
    sborrow : {n} (n >= 1) => [n] -> [n] -> Bit
    scanl : {n, a, b} (a -> b -> a) -> a -> [n]b -> [1 + n]a
    scanr : {n, a, b} (a -> b -> b) -> b -> [n]a -> [1 + n]b
    scarry : {n} (n >= 1) => [n] -> [n] -> Bit
    sext : {m, n} (m >= n, n >= 1) => [n] -> [m]
    sort : {a, n} (Cmp a) => [n]a -> [n]a
    sortBy : {a, n} (a -> a -> Bit) -> [n]a -> [n]a
    split : {parts, each, a} [parts * each]a -> [parts][each]a
    splitAt : {front, back, a} [front + back]a -> ([front]a, [back]a)
    sum : {n, a} (Eq a, Ring a) => [n]a -> a
    True : Bit
    tail : {n, a} [1 + n]a -> [n]a
    take : {front, back, a} [front + back]a -> [front]a
    toInteger : {a} (Integral a) => a -> Integer
    toSignedInteger : {n} (n >= 1) => [n] -> Integer
    trace : {n, a, b} String n -> a -> b -> b
    traceVal : {n, a} String n -> a -> a
    transpose : {rows, cols, a} [rows][cols]a -> [cols][rows]a
    trunc : {a} (Round a) => a -> Integer
    uncurry : {a, b, c} (a -> b -> c) -> (a, b) -> c
    undefined : {a} a
    update : {n, a, ix} (Integral ix) => [n]a -> ix -> a -> [n]a
    updateEnd : {n, a, ix} (Integral ix) => [n]a -> ix -> a -> [n]a
    updates : {n, k, ix, a} (Integral ix) => [n]a -> [k]ix -> [k]a -> [n]a
    updatesEnd : {n, k, ix, a} (Integral ix) => [n]a -> [k]ix -> [k]a -> [n]a
    zero : {a} (Zero a) => a
    zext : {m, n} (m >= n) => [n] -> [m]
    zip : {n, a, b} [n]a -> [n]b -> [n](a, b)
    zipWith : {n, a, b, c} (a -> b -> c) -> [n]a -> [n]b -> [n]c
     
  From Inst3
  ----------
       
    c : [m]
    x : [4]
    y : [8]
     
  From Inst3::import of F at issue1455/G.cry:5:1--5:9
  ---------------------------------------------------
       
    a : [4]
    b : [8]
     
