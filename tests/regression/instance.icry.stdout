Loading module Cryptol
Loading module Cryptol
Loading module Float
Loading module instance
zero`{Bit} : Bit
zero`{Integer} : Integer
zero`{Rational} : Rational
zero`{Z _} : {n} (n >= 1) => Z n
zero`{[_]_} : {n, a} (Zero a) => [n]a
zero`{_ -> _} : {a, b} (Zero b) => a -> b
zero`{()} : ()
zero`{(_, _)} : {a, b} (Zero b, Zero a) => (a, b)
zero`{{}} : {}
zero`{{x : _, y : _}} : {a, b} (Zero b, Zero a) => {x : a, y : b}
zero`{Float _ _} : {n, m} (ValidFloat n m) => Float n m

[error] at instance.icry:14:4--14:8:
  • Type `Box ?a` does not have `zero`
      arising from
      use of expression zero
      at instance.icry:14:4--14:8
  where
  ?a is type wildcard (_) at instance.icry:14:14--14:15
complement`{Bit} : Bit -> Bit

[error] at instance.icry:17:4--17:14:
  • Type `Integer` does not support logical operations.
      arising from
      use of expression complement
      at instance.icry:17:4--17:14

[error] at instance.icry:18:4--18:14:
  • Type `Rational` does not support logical operations.
      arising from
      use of expression complement
      at instance.icry:18:4--18:14

[error] at instance.icry:19:4--19:14:
  • Type `Z ?m` does not support logical operations.
      arising from
      use of expression complement
      at instance.icry:19:4--19:14
  where
  ?m is type wildcard (_) at instance.icry:19:18--19:19
complement`{[_]_} : {n, a} (Logic a) => [n]a -> [n]a
complement`{(_ -> _)} : {a, b} (Logic b) => (a -> b) -> a -> b
complement`{()} : () -> ()
complement`{(_, _)} : {a, b} (Logic b, Logic a) => (a, b) -> (a, b)
complement`{{}} : {} -> {}
complement`{{x : _, y : _}} :
  {a, b} (Logic b, Logic a) => {x : a, y : b} -> {x : a, y : b}

[error] at instance.icry:26:4--26:14:
  • Type `Float ?m ?n` does not support logical operations.
      arising from
      use of expression complement
      at instance.icry:26:4--26:14
  where
  ?m is type wildcard (_) at instance.icry:26:22--26:23
  ?n is type wildcard (_) at instance.icry:26:24--26:25

[error] at instance.icry:27:4--27:14:
  • Type `Box ?a` does not support logical operations.
      arising from
      use of expression complement
      at instance.icry:27:4--27:14
  where
  ?a is type wildcard (_) at instance.icry:27:20--27:21

[error] at instance.icry:29:4--29:10:
  • Type `Bit` does not support ring operations.
      arising from
      use of expression negate
      at instance.icry:29:4--29:10
negate`{Integer} : Integer -> Integer
negate`{Rational} : Rational -> Rational
negate`{Z _} : {n} (n >= 1) => Z n -> Z n
negate`{[_]} : {n} [n] -> [n]
negate`{[_]_} : {n, a} (Ring ([n]a)) => [n]a -> [n]a
negate`{(_ -> _)} : {a, b} (Ring b) => (a -> b) -> a -> b
negate`{()} : () -> ()
negate`{(_, _)} : {a, b} (Ring b, Ring a) => (a, b) -> (a, b)
negate`{{}} : {} -> {}
negate`{{x : _, y : _}} :
  {a, b} (Ring b, Ring a) => {x : a, y : b} -> {x : a, y : b}
negate`{Float _ _} : {n, m} (ValidFloat n m) => Float n m -> Float n m

[error] at instance.icry:41:4--41:10:
  • Type `Box ?a` does not support ring operations.
      arising from
      use of expression negate
      at instance.icry:41:4--41:10
  where
  ?a is type wildcard (_) at instance.icry:41:16--41:17

[error] at instance.icry:43:4--43:7:
  • `Bit` is not an integral type.
      arising from
      use of expression (%)
      at instance.icry:43:4--43:7
(%)`{Integer} : Integer -> Integer -> Integer

[error] at instance.icry:45:4--45:7:
  • `Rational` is not an integral type.
      arising from
      use of expression (%)
      at instance.icry:45:4--45:7

[error] at instance.icry:46:4--46:7:
  • `Z ?m` is not an integral type.
      arising from
      use of expression (%)
      at instance.icry:46:4--46:7
  where
  ?m is type wildcard (_) at instance.icry:46:11--46:12
(%)`{[_]_} : {n, a} (Integral ([n]a)) => [n]a -> [n]a -> [n]a

[error] at instance.icry:48:4--48:7:
  • `?a -> ?b` is not an integral type.
      arising from
      use of expression (%)
      at instance.icry:48:4--48:7
  where
  ?a is type wildcard (_) at instance.icry:48:10--48:11
  ?b is type wildcard (_) at instance.icry:48:15--48:16

[error] at instance.icry:49:4--49:7:
  • `()` is not an integral type.
      arising from
      use of expression (%)
      at instance.icry:49:4--49:7

[error] at instance.icry:50:4--50:7:
  • `(?a, ?b)` is not an integral type.
      arising from
      use of expression (%)
      at instance.icry:50:4--50:7
  where
  ?a is type wildcard (_) at instance.icry:50:10--50:11
  ?b is type wildcard (_) at instance.icry:50:13--50:14

[error] at instance.icry:51:4--51:7:
  • `{}` is not an integral type.
      arising from
      use of expression (%)
      at instance.icry:51:4--51:7

[error] at instance.icry:52:4--52:7:
  • `{x : ?a, y : ?b}` is not an integral type.
      arising from
      use of expression (%)
      at instance.icry:52:4--52:7
  where
  ?a is type wildcard (_) at instance.icry:52:14--52:15
  ?b is type wildcard (_) at instance.icry:52:21--52:22

[error] at instance.icry:53:4--53:7:
  • `Float ?m ?n` is not an integral type.
      arising from
      use of expression (%)
      at instance.icry:53:4--53:7
  where
  ?m is type wildcard (_) at instance.icry:53:15--53:16
  ?n is type wildcard (_) at instance.icry:53:17--53:18

[error] at instance.icry:54:4--54:7:
  • `Box ?a` is not an integral type.
      arising from
      use of expression (%)
      at instance.icry:54:4--54:7
  where
  ?a is type wildcard (_) at instance.icry:54:13--54:14

[error] at instance.icry:56:4--56:9:
  • Type `Bit` does not support field operations.
      arising from
      use of expression recip
      at instance.icry:56:4--56:9

[error] at instance.icry:57:4--57:9:
  • Type `Integer` does not support field operations.
      arising from
      use of expression recip
      at instance.icry:57:4--57:9
recip`{Rational} : Rational -> Rational
recip`{Z _} : {n} (prime n, n >= 1) => Z n -> Z n

[error] at instance.icry:60:4--60:9:
  • Type `[?m]?a` does not support field operations.
      arising from
      use of expression recip
      at instance.icry:60:4--60:9
  where
  ?m is type wildcard (_) at instance.icry:60:12--60:13
  ?a is type wildcard (_) at instance.icry:60:14--60:15

[error] at instance.icry:61:4--61:9:
  • Type `?a -> ?b` does not support field operations.
      arising from
      use of expression recip
      at instance.icry:61:4--61:9
  where
  ?a is type wildcard (_) at instance.icry:61:12--61:13
  ?b is type wildcard (_) at instance.icry:61:17--61:18

[error] at instance.icry:62:4--62:9:
  • Type `()` does not support field operations.
      arising from
      use of expression recip
      at instance.icry:62:4--62:9

[error] at instance.icry:63:4--63:9:
  • Type `(?a, ?b)` does not support field operations.
      arising from
      use of expression recip
      at instance.icry:63:4--63:9
  where
  ?a is type wildcard (_) at instance.icry:63:12--63:13
  ?b is type wildcard (_) at instance.icry:63:15--63:16

[error] at instance.icry:64:4--64:9:
  • Type `{}` does not support field operations.
      arising from
      use of expression recip
      at instance.icry:64:4--64:9

[error] at instance.icry:65:4--65:9:
  • Type `{x : ?a, y : ?b}` does not support field operations.
      arising from
      use of expression recip
      at instance.icry:65:4--65:9
  where
  ?a is type wildcard (_) at instance.icry:65:16--65:17
  ?b is type wildcard (_) at instance.icry:65:23--65:24
recip`{Float _ _} : {n, m} (ValidFloat n m) => Float n m -> Float n m

[error] at instance.icry:67:4--67:9:
  • Type `Box ?a` does not support field operations.
      arising from
      use of expression recip
      at instance.icry:67:4--67:9
  where
  ?a is type wildcard (_) at instance.icry:67:15--67:16

[error] at instance.icry:69:4--69:9:
  • Type `Bit` does not support rounding operations.
      arising from
      use of expression floor
      at instance.icry:69:4--69:9

[error] at instance.icry:70:4--70:9:
  • Type `Integer` does not support rounding operations.
      arising from
      use of expression floor
      at instance.icry:70:4--70:9
floor`{Rational} : Rational -> Integer

[error] at instance.icry:72:4--72:9:
  • Type `Z ?m` does not support rounding operations.
      arising from
      use of expression floor
      at instance.icry:72:4--72:9
  where
  ?m is type wildcard (_) at instance.icry:72:13--72:14

[error] at instance.icry:73:4--73:9:
  • Type `[?m]?a` does not support rounding operations.
      arising from
      use of expression floor
      at instance.icry:73:4--73:9
  where
  ?m is type wildcard (_) at instance.icry:73:12--73:13
  ?a is type wildcard (_) at instance.icry:73:14--73:15

[error] at instance.icry:74:4--74:9:
  • Type `?a -> ?b` does not support rounding operations.
      arising from
      use of expression floor
      at instance.icry:74:4--74:9
  where
  ?a is type wildcard (_) at instance.icry:74:12--74:13
  ?b is type wildcard (_) at instance.icry:74:17--74:18

[error] at instance.icry:75:4--75:9:
  • Type `()` does not support rounding operations.
      arising from
      use of expression floor
      at instance.icry:75:4--75:9

[error] at instance.icry:76:4--76:9:
  • Type `(?a, ?b)` does not support rounding operations.
      arising from
      use of expression floor
      at instance.icry:76:4--76:9
  where
  ?a is type wildcard (_) at instance.icry:76:12--76:13
  ?b is type wildcard (_) at instance.icry:76:15--76:16

[error] at instance.icry:77:4--77:9:
  • Type `{}` does not support rounding operations.
      arising from
      use of expression floor
      at instance.icry:77:4--77:9

[error] at instance.icry:78:4--78:9:
  • Type `{x : ?a, y : ?b}` does not support rounding operations.
      arising from
      use of expression floor
      at instance.icry:78:4--78:9
  where
  ?a is type wildcard (_) at instance.icry:78:16--78:17
  ?b is type wildcard (_) at instance.icry:78:23--78:24
floor`{Float _ _} : {n, m} (ValidFloat n m) => Float n m -> Integer

[error] at instance.icry:80:4--80:9:
  • Type `Box ?a` does not support rounding operations.
      arising from
      use of expression floor
      at instance.icry:80:4--80:9
  where
  ?a is type wildcard (_) at instance.icry:80:15--80:16
(==)`{Bit} : Bit -> Bit -> Bit
(==)`{Integer} : Integer -> Integer -> Bit
(==)`{Rational} : Rational -> Rational -> Bit
(==)`{Z _} : {n} (n >= 1) => Z n -> Z n -> Bit
(==)`{[_]_} : {n, a} (Eq a) => [n]a -> [n]a -> Bit

[error] at instance.icry:87:4--87:8:
  • Type `?a -> ?b` does not support equality.
      arising from
      use of expression (==)
      at instance.icry:87:4--87:8
  where
  ?a is type wildcard (_) at instance.icry:87:11--87:12
  ?b is type wildcard (_) at instance.icry:87:16--87:17
(==)`{()} : () -> () -> Bit
(==)`{(_, _)} : {a, b} (Eq b, Eq a) => (a, b) -> (a, b) -> Bit
(==)`{{}} : {} -> {} -> Bit
(==)`{{x : _, y : _}} :
  {a, b} (Eq b, Eq a) => {x : a, y : b} -> {x : a, y : b} -> Bit
(==)`{Float _ _} : {n, m} (ValidFloat n m) => Float n m -> Float n m -> Bit

[error] at instance.icry:93:4--93:8:
  • Type `Box ?a` does not support equality.
      arising from
      use of expression (==)
      at instance.icry:93:4--93:8
  where
  ?a is type wildcard (_) at instance.icry:93:14--93:15
(<)`{Bit} : Bit -> Bit -> Bit
(<)`{Integer} : Integer -> Integer -> Bit
(<)`{Rational} : Rational -> Rational -> Bit

[error] at instance.icry:98:4--98:7:
  • Type `Z ?m` does not support comparisons.
      arising from
      use of expression (<)
      at instance.icry:98:4--98:7
  where
  ?m is type wildcard (_) at instance.icry:98:11--98:12
(<)`{[_]_} : {n, a} (Cmp a) => [n]a -> [n]a -> Bit

[error] at instance.icry:100:4--100:7:
  • Type `?a -> ?b` does not support comparisons.
      arising from
      use of expression (<)
      at instance.icry:100:4--100:7
  where
  ?a is type wildcard (_) at instance.icry:100:10--100:11
  ?b is type wildcard (_) at instance.icry:100:15--100:16
(<)`{()} : () -> () -> Bit
(<)`{(_, _)} : {a, b} (Cmp b, Cmp a) => (a, b) -> (a, b) -> Bit
(<)`{{}} : {} -> {} -> Bit
(<)`{{x : _, y : _}} :
  {a, b} (Cmp b, Cmp a) => {x : a, y : b} -> {x : a, y : b} -> Bit
(<)`{Float _ _} : {n, m} (ValidFloat n m) => Float n m -> Float n m -> Bit

[error] at instance.icry:106:4--106:7:
  • Type `Box ?a` does not support comparisons.
      arising from
      use of expression (<)
      at instance.icry:106:4--106:7
  where
  ?a is type wildcard (_) at instance.icry:106:13--106:14

[error] at instance.icry:108:4--108:8:
  • Type `Bit` does not support signed comparisons.
      arising from
      use of expression (<$)
      at instance.icry:108:4--108:8

[error] at instance.icry:109:4--109:8:
  • Type `Integer` does not support signed comparisons.
      arising from
      use of expression (<$)
      at instance.icry:109:4--109:8

[error] at instance.icry:110:4--110:8:
  • Type `Rational` does not support signed comparisons.
      arising from
      use of expression (<$)
      at instance.icry:110:4--110:8

[error] at instance.icry:111:4--111:8:
  • Type `Z ?m` does not support signed comparisons.
      arising from
      use of expression (<$)
      at instance.icry:111:4--111:8
  where
  ?m is type wildcard (_) at instance.icry:111:12--111:13
(<$)`{[_]_} : {n, a} (SignedCmp ([n]a)) => [n]a -> [n]a -> Bit

[error] at instance.icry:113:4--113:8:
  • Type `?a -> ?b` does not support signed comparisons.
      arising from
      use of expression (<$)
      at instance.icry:113:4--113:8
  where
  ?a is type wildcard (_) at instance.icry:113:11--113:12
  ?b is type wildcard (_) at instance.icry:113:16--113:17
(<$)`{()} : () -> () -> Bit
(<$)`{(_, _)} : {a, b} (SignedCmp b, SignedCmp a) => (a, b) -> (a, b) -> Bit
(<$)`{{}} : {} -> {} -> Bit
(<$)`{{x : _, y : _}} :
  {a, b} (SignedCmp b, SignedCmp a) => {x : a, y : b} -> {x : a, y : b} -> Bit

[error] at instance.icry:118:4--118:8:
  • Type `Float ?m ?n` does not support signed comparisons.
      arising from
      use of expression (<$)
      at instance.icry:118:4--118:8
  where
  ?m is type wildcard (_) at instance.icry:118:16--118:17
  ?n is type wildcard (_) at instance.icry:118:18--118:19

[error] at instance.icry:119:4--119:8:
  • Type `Box ?a` does not support signed comparisons.
      arising from
      use of expression (<$)
      at instance.icry:119:4--119:8
  where
  ?a is type wildcard (_) at instance.icry:119:14--119:15
number`{rep = Bit} : {n} (1 >= n) => Bit

[error] at instance.icry:122:4--122:10:
  Ambiguous numeric type: type argument 'val' of 'number'

[error] at instance.icry:123:4--123:10:
  Ambiguous numeric type: type argument 'val' of 'number'
number`{rep = Z _} : {n, m} (m >= 1 + n, m >= 1) => Z m
number`{rep = [_]_} : {n, m} (m >= width n) => [m]

[error] at instance.icry:126:4--126:10:
  • `?m` is not a valid literal of type `?a -> ?b`
      arising from
      use of literal or demoted expression
      at instance.icry:126:4--126:10
  where
  ?m is type argument 'val' of 'number' at instance.icry:126:4--126:10
  ?a is type wildcard (_) at instance.icry:126:18--126:19
  ?b is type wildcard (_) at instance.icry:126:23--126:24

[error] at instance.icry:127:4--127:10:
  • `?m` is not a valid literal of type `()`
      arising from
      use of literal or demoted expression
      at instance.icry:127:4--127:10
  where
  ?m is type argument 'val' of 'number' at instance.icry:127:4--127:10

[error] at instance.icry:128:4--128:10:
  • `?m` is not a valid literal of type `(?a, ?b)`
      arising from
      use of literal or demoted expression
      at instance.icry:128:4--128:10
  where
  ?m is type argument 'val' of 'number' at instance.icry:128:4--128:10
  ?a is type wildcard (_) at instance.icry:128:19--128:20
  ?b is type wildcard (_) at instance.icry:128:22--128:23

[error] at instance.icry:129:4--129:10:
  • `?m` is not a valid literal of type `{}`
      arising from
      use of literal or demoted expression
      at instance.icry:129:4--129:10
  where
  ?m is type argument 'val' of 'number' at instance.icry:129:4--129:10

[error] at instance.icry:130:4--130:10:
  • `?m` is not a valid literal of type `{x : ?a, y : ?b}`
      arising from
      use of literal or demoted expression
      at instance.icry:130:4--130:10
  where
  ?m is type argument 'val' of 'number' at instance.icry:130:4--130:10
  ?a is type wildcard (_) at instance.icry:130:23--130:24
  ?b is type wildcard (_) at instance.icry:130:30--130:31
number`{rep = Float _ _} :
  {n, m, i} (ValidFloat m i, Literal n (Float m i)) => Float m i

[error] at instance.icry:132:4--132:10:
  • `?m` is not a valid literal of type `Box ?a`
      arising from
      use of literal or demoted expression
      at instance.icry:132:4--132:10
  where
  ?m is type argument 'val' of 'number' at instance.icry:132:4--132:10
  ?a is type wildcard (_) at instance.icry:132:22--132:23
fromToLessThan`{a = Bit} : {n, m} (2 >= m, m >= n) => [m - n]
fromToLessThan`{a = Integer} : {n, m} (m >= n) => [m - n]Integer
fromToLessThan`{a = Rational} : {n, m} (m >= n) => [m - n]Rational
fromToLessThan`{a = [_]} :
  {n, m, i}
    (i >= width (max 1 m - 1), m >= n) =>
    [m - n][i]
fromToLessThan`{a = Z _} :
  {n, m, i} (i >= 1, i >= m, m >= n, fin i) => [m - n](Z i)
fromToLessThan`{a = [_]_} :
  {n, m, i, a} (LiteralLessThan m ([i]a), m >= n) => [m - n][i]a

[error] at instance.icry:140:4--140:18:
  • Type `?a -> ?b` does not contain all literals below `?m`.
      arising from
      use of expression fromToLessThan
      at instance.icry:140:4--140:18
  where
  ?m is type argument 'bound' of 'fromToLessThan' at instance.icry:140:4--140:18
  ?a is type wildcard (_) at instance.icry:140:22--140:23
  ?b is type wildcard (_) at instance.icry:140:27--140:28

[error] at instance.icry:141:4--141:18:
  • Type `()` does not contain all literals below `?m`.
      arising from
      use of expression fromToLessThan
      at instance.icry:141:4--141:18
  where
  ?m is type argument 'bound' of 'fromToLessThan' at instance.icry:141:4--141:18

[error] at instance.icry:142:4--142:18:
  • Type `(?a, ?b)` does not contain all literals below `?m`.
      arising from
      use of expression fromToLessThan
      at instance.icry:142:4--142:18
  where
  ?m is type argument 'bound' of 'fromToLessThan' at instance.icry:142:4--142:18
  ?a is type wildcard (_) at instance.icry:142:23--142:24
  ?b is type wildcard (_) at instance.icry:142:26--142:27

[error] at instance.icry:143:4--143:18:
  • Type `{}` does not contain all literals below `?m`.
      arising from
      use of expression fromToLessThan
      at instance.icry:143:4--143:18
  where
  ?m is type argument 'bound' of 'fromToLessThan' at instance.icry:143:4--143:18

[error] at instance.icry:144:4--144:18:
  • Type `{x : ?a, y : ?b}`
      does not contain all literals below `?m`.
      arising from
      use of expression fromToLessThan
      at instance.icry:144:4--144:18
  where
  ?m is type argument 'bound' of 'fromToLessThan' at instance.icry:144:4--144:18
  ?a is type wildcard (_) at instance.icry:144:27--144:28
  ?b is type wildcard (_) at instance.icry:144:34--144:35
fromToLessThan`{a = Float _ _} :
  {n, m, i, j}
    (ValidFloat i j, LiteralLessThan m (Float i j), m >= n) =>
    [m - n](Float i j)

[error] at instance.icry:146:4--146:18:
  • Type `Box ?a` does not contain all literals below `?m`.
      arising from
      use of expression fromToLessThan
      at instance.icry:146:4--146:18
  where
  ?m is type argument 'bound' of 'fromToLessThan' at instance.icry:146:4--146:18
  ?a is type wildcard (_) at instance.icry:146:26--146:27
